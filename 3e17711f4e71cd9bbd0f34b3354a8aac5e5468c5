{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1951c627_cc2d1338",
        "filename": "subprojects/dhcp-done/dhcp-done.cpp",
        "patchSetId": 10
      },
      "lineNbr": 62,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2024-07-23T02:41:02Z",
      "side": 1,
      "message": "Really? Wouldn\u0027t this always point to a logic error that needs to fail at install time? I mean, I guess you could have a transient read failure but I just don\u0027t think it can actually happen.\n\nAlso, you can safely collapse this into a single `catch (const std::exception \u0026e)` as all exceptions should derive from that class.",
      "revId": "3e17711f4e71cd9bbd0f34b3354a8aac5e5468c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd8a0788_89f3368a",
        "filename": "subprojects/dhcp-done/file-io.cpp",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2024-07-23T02:41:02Z",
      "side": 1,
      "message": "Don\u0027t create an uninitialized fd, just declare and define in one line.",
      "revId": "3e17711f4e71cd9bbd0f34b3354a8aac5e5468c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76c655ff_76b0bc10",
        "filename": "subprojects/dhcp-done/file-io.cpp",
        "patchSetId": 10
      },
      "lineNbr": 30,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2024-07-23T02:41:02Z",
      "side": 1,
      "message": "I would just drop the ifstream entirely and use `stdplus::LineReader` on the `fd` above.\n\nIf you want to parse the code from int (although i really think it would be better just to write the file in packet format and do a `stdplus::fd::readAll()` here), just use `stdplus::fromStr\u003cint\u003e(code_string)` in `stdplus/numeric/str.hpp`",
      "revId": "3e17711f4e71cd9bbd0f34b3354a8aac5e5468c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c334378_b51c4eaf",
        "filename": "subprojects/dhcp-done/file-io.cpp",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2024-07-23T02:41:02Z",
      "side": 1,
      "message": "Just use append and a format string so that you don\u0027t need the intermediate string `out.append(\"{}\\n{}\", status.code, status.message)`",
      "revId": "3e17711f4e71cd9bbd0f34b3354a8aac5e5468c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0329b3be_b0c94bc1",
        "filename": "subprojects/dhcp-done/test/meson.build",
        "patchSetId": 10
      },
      "lineNbr": 36,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2024-07-23T02:41:02Z",
      "side": 1,
      "message": "You should refactor the meson.build for the `src/meson.build` to build a static library that can be included here and as part of the executable to prevent multiple compilation of `file-io.cpp`",
      "revId": "3e17711f4e71cd9bbd0f34b3354a8aac5e5468c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64cb467c_471da788",
        "filename": "subprojects/dhcp-done/update-dhcp-status.cpp",
        "patchSetId": 10
      },
      "lineNbr": 10,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2024-07-23T02:41:02Z",
      "side": 1,
      "message": "nit: prefer `stdplus::print` or `stdplus::println` over `iostream` variants.",
      "revId": "3e17711f4e71cd9bbd0f34b3354a8aac5e5468c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "793baebb_869c4116",
        "filename": "subprojects/dhcp-done/update-dhcp-status.cpp",
        "patchSetId": 10
      },
      "lineNbr": 58,
      "author": {
        "id": 1000188
      },
      "writtenOn": "2024-07-23T02:41:02Z",
      "side": 1,
      "message": "Catch `const std::exception \u0026` so you can print out the `e.what()` with the error.",
      "revId": "3e17711f4e71cd9bbd0f34b3354a8aac5e5468c5",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}